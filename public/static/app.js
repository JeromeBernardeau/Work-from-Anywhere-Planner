// FICOFI Work-from-Anywhere Planner Frontend JavaScript

// ============== GLOBAL STATE ==============
let currentUser = null;
let dashboardData = null;
let employees = [];
let filters = { teams: [], sites: [], roles: [] };

// ============== UTILITY FUNCTIONS ==============

// Format percentage with color coding
function formatPercentage(value, total = 100) {
  const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
  let colorClass = 'text-gray-500';
  
  if (percentage >= 70) colorClass = 'text-green-600';
  else if (percentage >= 40) colorClass = 'text-blue-600';
  
  return { percentage, colorClass };
}

// Get status color class
function getStatusColor(status) {
  switch (status) {
    case 'WFO': return 'bg-green-500 text-white';
    case 'WFH': return 'bg-blue-500 text-white';
    case 'TRIP': return 'bg-orange-500 text-white';
    case 'LEAVE': return 'bg-red-500 text-white';
    case 'IN_OFFICE': return 'bg-gray-500 text-white';
    default: return 'bg-gray-200 text-gray-600';
  }
}

// Get heatmap color for occupancy percentage
function getHeatmapColor(percentage) {
  if (percentage >= 70) return 'bg-green-500';
  if (percentage >= 40) return 'bg-blue-500';
  return 'bg-gray-400';
}

// Format date for API calls
function formatDate(date) {
  return date.toISOString().split('T')[0];
}

// ============== API FUNCTIONS ==============

// Fetch dashboard data
async function fetchDashboardData() {
  try {
    const response = await fetch('/api/dashboard');
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.error || 'Failed to fetch dashboard data');
    }
    
    dashboardData = data;
    return data;
  } catch (error) {
    console.error('Error fetching dashboard data:', error);
    showNotification('Error loading dashboard data', 'error');
    return null;
  }
}\n\n// Fetch employees\nasync function fetchEmployees(search = '', team = '', site = '', role = '') {\n  try {\n    const params = new URLSearchParams();\n    if (search) params.append('search', search);\n    if (team) params.append('team', team);\n    if (site) params.append('site', site);\n    if (role) params.append('role', role);\n    \n    const response = await fetch(`/api/employees?${params}`);\n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to fetch employees');\n    }\n    \n    employees = data.employees;\n    return data.employees;\n  } catch (error) {\n    console.error('Error fetching employees:', error);\n    showNotification('Error loading employees', 'error');\n    return [];\n  }\n}\n\n// Fetch filter options\nasync function fetchFilters() {\n  try {\n    const response = await fetch('/api/filters');\n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to fetch filters');\n    }\n    \n    filters = data;\n    return data;\n  } catch (error) {\n    console.error('Error fetching filters:', error);\n    return { teams: [], sites: [], roles: [] };\n  }\n}\n\n// Update schedule\nasync function updateSchedule(userId, date, timePeriod, status, notes = '') {\n  try {\n    const response = await fetch('/api/schedule', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        date,\n        timePeriod,\n        status,\n        notes\n      })\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to update schedule');\n    }\n    \n    showNotification('Schedule updated successfully', 'success');\n    return data;\n  } catch (error) {\n    console.error('Error updating schedule:', error);\n    showNotification('Error updating schedule', 'error');\n    return null;\n  }\n}\n\n// ============== UI FUNCTIONS ==============\n\n// Show notification\nfunction showNotification(message, type = 'info') {\n  const notification = document.createElement('div');\n  const bgColor = type === 'error' ? 'bg-red-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-500';\n  \n  notification.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50 transition-all duration-300`;\n  notification.textContent = message;\n  \n  document.body.appendChild(notification);\n  \n  setTimeout(() => {\n    notification.style.opacity = '0';\n    setTimeout(() => {\n      document.body.removeChild(notification);\n    }, 300);\n  }, 3000);\n}\n\n// Update dashboard metrics\nfunction updateDashboardMetrics(data) {\n  if (!data || !data.metrics) return;\n  \n  const { metrics } = data;\n  \n  // Update metric values\n  const totalEmployeesEl = document.getElementById('total-employees');\n  const thisWeekOfficeEl = document.getElementById('this-week-office');\n  const nextWeekOfficeEl = document.getElementById('next-week-office');\n  const activeSitesEl = document.getElementById('active-sites');\n  const teamsTrackedEl = document.getElementById('teams-tracked');\n  \n  if (totalEmployeesEl) totalEmployeesEl.textContent = metrics.totalEmployees;\n  if (thisWeekOfficeEl) thisWeekOfficeEl.textContent = metrics.thisWeekOffice + '%';\n  if (nextWeekOfficeEl) nextWeekOfficeEl.textContent = metrics.nextWeekOffice + '%';\n  if (activeSitesEl) activeSitesEl.textContent = metrics.activeSites;\n  if (teamsTrackedEl) teamsTrackedEl.textContent = metrics.teamsTracked;\n}\n\n// Render presence by site\nfunction renderPresenceBySite(sites) {\n  const container = document.getElementById('presence-by-site');\n  if (!container || !sites) return;\n  \n  const html = sites.map(site => {\n    const percentage = site.total_employees > 0 \n      ? Math.round((site.office_today / site.total_employees) * 100) \n      : 0;\n    const { colorClass } = formatPercentage(site.office_today, site.total_employees);\n    \n    return `\n      <div class=\"flex items-center justify-between mb-4\">\n        <div class=\"flex-1\">\n          <div class=\"flex items-center justify-between mb-1\">\n            <span class=\"text-sm font-medium text-gray-700\">${site.site}</span>\n            <span class=\"text-sm ${colorClass}\">${percentage}%</span>\n          </div>\n          <div class=\"flex items-center justify-between text-xs text-gray-500 mb-2\">\n            <span>${site.total_employees} employees</span>\n            <span>This Week: ${percentage}%</span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2\">\n            <div class=\"h-2 rounded-full transition-all duration-300\" \n                 style=\"width: ${percentage}%; background-color: ${percentage >= 70 ? '#10b981' : percentage >= 40 ? '#3b82f6' : '#9ca3af'}\"></div>\n          </div>\n        </div>\n      </div>\n    `;\n  }).join('');\n  \n  container.innerHTML = html;\n}\n\n// Render presence by team\nfunction renderPresenceByTeam(teams) {\n  const container = document.getElementById('presence-by-team');\n  if (!container || !teams) return;\n  \n  const html = teams.map(team => {\n    const percentage = team.total_members > 0 \n      ? Math.round((team.office_today / team.total_members) * 100) \n      : 0;\n    const { colorClass } = formatPercentage(team.office_today, team.total_members);\n    \n    return `\n      <div class=\"flex items-center justify-between mb-4\">\n        <div class=\"flex-1\">\n          <div class=\"flex items-center justify-between mb-1\">\n            <span class=\"text-sm font-medium text-gray-700\">${team.department}</span>\n            <span class=\"text-sm ${colorClass}\">${percentage}%</span>\n          </div>\n          <div class=\"flex items-center justify-between text-xs text-gray-500 mb-2\">\n            <span>${team.total_members} members</span>\n            <span>${percentage}%</span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2\">\n            <div class=\"h-2 rounded-full transition-all duration-300\" \n                 style=\"width: ${percentage}%; background-color: ${percentage >= 70 ? '#10b981' : percentage >= 40 ? '#3b82f6' : '#9ca3af'}\"></div>\n          </div>\n        </div>\n      </div>\n    `;\n  }).join('');\n  \n  container.innerHTML = html;\n}\n\n// Render heatmap\nfunction renderHeatmap(heatmapData) {\n  const container = document.getElementById('heatmap-grid');\n  if (!container) return;\n  \n  // Create a data structure for easy lookup\n  const heatmapLookup = {};\n  heatmapData?.forEach(item => {\n    const key = `${item.day_of_week}-${item.time_period}`;\n    heatmapLookup[key] = {\n      percentage: item.total_count > 0 ? Math.round((item.office_count / item.total_count) * 100) : 0,\n      count: item.office_count\n    };\n  });\n  \n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'];\n  const periods = ['AM', 'PM'];\n  \n  const html = periods.map(period => {\n    const row = days.map(day => {\n      const key = `${day}-${period}`;\n      const data = heatmapLookup[key] || { percentage: 0, count: 0 };\n      const colorClass = getHeatmapColor(data.percentage);\n      \n      return `\n        <div class=\"${colorClass} h-12 rounded flex items-center justify-center text-white text-sm font-medium\" \n             title=\"${day} ${period}: ${data.percentage}% (${data.count} in office)\">\n          ${data.percentage}%\n        </div>\n      `;\n    }).join('');\n    \n    return `\n      <div class=\"grid grid-cols-6 gap-2 mb-2\">\n        <div class=\"text-sm font-medium text-gray-700 flex items-center\">${period}</div>\n        ${row}\n      </div>\n    `;\n  }).join('');\n  \n  container.innerHTML = html;\n}\n\n// Render employee directory\nfunction renderEmployeeDirectory(employeeList) {\n  const container = document.getElementById('employee-directory');\n  if (!container) return;\n  \n  if (!employeeList || employeeList.length === 0) {\n    container.innerHTML = `\n      <div class=\"p-8 text-center text-gray-500\">\n        <i class=\"fas fa-users text-4xl mb-4\"></i>\n        <p>No employees found</p>\n      </div>\n    `;\n    return;\n  }\n  \n  const html = employeeList.map(employee => {\n    const { colorClass } = formatPercentage(employee.this_week_percentage, 100);\n    \n    return `\n      <div class=\"flex items-center justify-between p-4 border-b border-gray-200 hover:bg-gray-50\">\n        <div class=\"flex items-center space-x-4\">\n          <div class=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-semibold\">\n            ${employee.display_name.split(' ').map(n => n[0]).join('').substring(0, 2)}\n          </div>\n          <div>\n            <h4 class=\"font-medium text-gray-900\">${employee.display_name}</h4>\n            <div class=\"text-sm text-gray-500\">\n              <span>${employee.email}</span> • \n              <span>${employee.department}</span> • \n              <span>${employee.site}</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"flex items-center space-x-4\">\n          <div class=\"text-right\">\n            <div class=\"text-sm font-medium text-gray-700\">${employee.role}</div>\n            <div class=\"text-xs text-gray-500\">This Week: <span class=\"${colorClass}\">${employee.this_week_percentage}%</span></div>\n          </div>\n        </div>\n      </div>\n    `;\n  }).join('');\n  \n  container.innerHTML = html;\n  \n  // Update showing count\n  const showingCountEl = document.getElementById('showing-count');\n  if (showingCountEl) {\n    showingCountEl.textContent = `Showing ${employeeList.length} of ${employeeList.length} employees`;\n  }\n}\n\n// Populate filter dropdowns\nfunction populateFilters() {\n  const teamFilter = document.getElementById('team-filter');\n  const siteFilter = document.getElementById('site-filter');\n  const roleFilter = document.getElementById('role-filter');\n  \n  if (teamFilter && filters.teams) {\n    teamFilter.innerHTML = '<option value=\"\">All Teams</option>' + \n      filters.teams.map(team => `<option value=\"${team}\">${team}</option>`).join('');\n  }\n  \n  if (siteFilter && filters.sites) {\n    siteFilter.innerHTML = '<option value=\"\">All Sites</option>' + \n      filters.sites.map(site => `<option value=\"${site}\">${site}</option>`).join('');\n  }\n  \n  if (roleFilter && filters.roles) {\n    roleFilter.innerHTML = '<option value=\"\">All Roles</option>' + \n      filters.roles.map(role => `<option value=\"${role}\">${role}</option>`).join('');\n  }\n}\n\n// ============== EVENT HANDLERS ==============\n\n// Filter employees based on current filter values\nfunction handleFilterChange() {\n  const search = document.getElementById('employee-search')?.value || '';\n  const team = document.getElementById('team-filter')?.value || '';\n  const site = document.getElementById('site-filter')?.value || '';\n  const role = document.getElementById('role-filter')?.value || '';\n  \n  fetchEmployees(search, team, site, role).then(employees => {\n    renderEmployeeDirectory(employees);\n  });\n}\n\n// Schedule slot click handler\nfunction handleScheduleSlotClick(event) {\n  const slot = event.target;\n  if (!slot.classList.contains('schedule-slot')) return;\n  \n  const day = slot.dataset.day;\n  const period = slot.dataset.period;\n  \n  // Cycle through status options\n  const currentStatus = slot.textContent.trim();\n  const statusCycle = {\n    'Remote': { next: 'Office', status: 'WFO', class: 'bg-green-500 hover:bg-green-600' },\n    'Office': { next: 'Off', status: 'OFF', class: 'bg-gray-400 hover:bg-gray-500' },\n    'Off': { next: 'Remote', status: 'WFH', class: 'bg-blue-500 hover:bg-blue-600' }\n  };\n  \n  const nextState = statusCycle[currentStatus] || statusCycle['Remote'];\n  \n  // Update UI\n  slot.textContent = nextState.next;\n  slot.className = `schedule-slot h-16 text-white rounded-lg ${nextState.class}`;\n  \n  // TODO: Send API request to update schedule\n  // Calculate actual date based on day and current week\n  // updateSchedule(userId, date, period, nextState.status);\n}\n\n// ============== PAGE-SPECIFIC INITIALIZATION ==============\n\n// Initialize dashboard page\nfunction initDashboard() {\n  fetchDashboardData().then(data => {\n    if (data) {\n      updateDashboardMetrics(data);\n      renderPresenceBySite(data.presenceBySite);\n      renderPresenceByTeam(data.presenceByTeam);\n      renderHeatmap(data.heatmapData);\n    }\n  });\n}\n\n// Initialize organization page\nfunction initOrganization() {\n  // Load filters and employees\n  Promise.all([\n    fetchFilters(),\n    fetchEmployees()\n  ]).then(([filtersData, employeesData]) => {\n    populateFilters();\n    renderEmployeeDirectory(employeesData);\n  });\n  \n  // Set up event listeners for filters\n  const searchInput = document.getElementById('employee-search');\n  const teamFilter = document.getElementById('team-filter');\n  const siteFilter = document.getElementById('site-filter');\n  const roleFilter = document.getElementById('role-filter');\n  \n  if (searchInput) {\n    let searchTimeout;\n    searchInput.addEventListener('input', () => {\n      clearTimeout(searchTimeout);\n      searchTimeout = setTimeout(handleFilterChange, 300);\n    });\n  }\n  \n  [teamFilter, siteFilter, roleFilter].forEach(filter => {\n    if (filter) {\n      filter.addEventListener('change', handleFilterChange);\n    }\n  });\n}\n\n// Initialize schedule page\nfunction initSchedule() {\n  // Set up schedule slot click handlers\n  document.addEventListener('click', handleScheduleSlotClick);\n  \n  // TODO: Load user's current schedule\n  // TODO: Set up week navigation\n  // TODO: Set up habit/recurring pattern management\n}\n\n// ============== MAIN INITIALIZATION ==============\n\n// Initialize app based on current page\nfunction initApp() {\n  const path = window.location.pathname;\n  \n  // Determine which page we're on and initialize accordingly\n  if (path === '/' || path === '/analytics') {\n    initDashboard();\n  } else if (path === '/organization') {\n    initOrganization();\n  } else if (path === '/schedule') {\n    initSchedule();\n  }\n  \n  // Set up any global event listeners\n  // TODO: Add notification system, keyboard shortcuts, etc.\n}\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initApp);\n} else {\n  initApp();\n}"